// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Status {
  inactive
  active
}

enum Currency {
  uzs
  usd
}

enum PaymentMethod {
  cash
  card
}

enum OrderStatus {
  pending
  accepted
  delivery
  cenceled
  completed
}

model Users {
  id           String         @id @default(uuid())
  fullname     String
  email        String         @unique
  password     String
  phone        String
  status       Status         @default(inactive)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  CurrentOrder CurrentOrder[]

  @@map("users")
}

model Drivers {
  id        String   @id @default(uuid())
  fullname  String
  email     String   @unique
  password  String
  phone     String
  avatarUrl String
  rating    Int      @default(0)
  status    Status   @default(inactive)
  car_model String
  car_name  String
  car_type  String
  Wallet    Wallet[]

  @@map("drivers")
}

model Wallet {
  id        String @id @default(uuid())
  driver_id String
  amount    Int

  driver Drivers @relation(fields: [driver_id], references: [id])
}

model Admins {
  id        String   @id @default(uuid())
  fullname  String
  email     String   @unique
  password  String
  status    Status   @default(inactive)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("admins")
}

model CurrentOrder {
  id        String      @id @default(uuid())
  start_dir String
  end_dir   String
  user_id   String
  amount    Float
  status    OrderStatus @default(pending)
  currency  Currency    @default(uzs)

  user Users @relation(fields: [user_id], references: [id])
}

model Orders {
  id          String      @id @default(uuid())
  currento_id String
  user_id     String
  driver_id   String
  start_dir   String
  end_dir     String
  status      OrderStatus @default(accepted)
  date        DateTime    @default(now())
  start_time  DateTime
  end_time    DateTime
  amount      Int
  currency    Currency    @default(uzs)
  score       Int         @default(0)
  comment     String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@map("orders")
}

model Otps {
  id        String   @id @default(uuid())
  email     String   @unique
  otp       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("otps")
}

model RefreshTokens {
  id        String   @id @default(uuid())
  email     String
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("refreshtokens")
}
